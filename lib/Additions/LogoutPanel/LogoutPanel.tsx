import { TFunction } from "i18next";
import React from "react";
import { makeObservable } from "mobx";
import { observer } from "mobx-react";
import { withTranslation, WithTranslation } from "react-i18next";

import { DefaultTheme, withTheme } from "styled-components";
import Box from "terriajs/lib/Styled/Box";
import Button from "terriajs/lib/Styled/Button";
import Text from "terriajs/lib/Styled/Text";
import withTerriaRef from "terriajs/lib/ReactViews/HOCs/withTerriaRef";
import MenuPanel from "terriajs/lib/ReactViews/StandardUserInterface/customizable/MenuPanel";
import Spacing from "terriajs/lib/Styled/Spacing";

import { ViewState_Arbm as ViewState } from "../../terriajsOverrides/ViewState_Arbm";
import { fetchFromAPI, sanitizeHTML } from "../utils";

import Styles from "./logout-panel.scss";

type PropTypes = WithTranslation & {
  viewState: ViewState;
  refFromHOC?: React.Ref<HTMLDivElement>;
  theme: DefaultTheme;
  t: TFunction;
};

interface LogoutPanelState {
  isOpen: boolean;
  waiting: boolean;
}

const INITIAL_STATE: LogoutPanelState = {
  isOpen: false,
  waiting: false
};

// ==============================================================================================================

//@ts-ignore
@observer
class LogoutPanel extends React.Component<PropTypes, LogoutPanelState> {
  /**
   * @param {Props} props
   */

  keyListener: (e: any) => void;
  abortController?: AbortController;

  // ---------------------------------------------------------------------------------------------------

  constructor(props: PropTypes) {
    super(props);

    this.keyListener = (e) => {
      if (e.key === "Escape") {
        this.closePanel();
      } else if (e.key == "Enter") {
        this.onLogoutClick();
      }
    };

    this.state = { ...INITIAL_STATE };
    // makeObservable(this);
  }

  // ---------------------------------------------------------------------------------------------------

  onLogoutClick = async () => {
    this.setState({ waiting: true });
    const signal = this.abortController?.signal ?? null;
    try {
      const _ = await fetchFromAPI(
        this.props.viewState,
        signal,
        "auth/logout/session/",
        {},
        "POST"
      );
    } catch (error) {
      if (error.name && error.name !== "AbortError") {
        console.warn(error.message + "\nLOGGED OUT ANYWAY.");
      }
    } finally {
      // This updates the UI to show the user as logged out
      // We do this in the finally clause, because we need to logout in the front end
      //   EVEN IF we didn't successfully log out from the server
      this.props.viewState.logout();
    }
  };

  // ---------------------------------------------------------------------------------------------------

  componentDidMount = () => {
    window.addEventListener("keydown", this.keyListener, true);
    this.abortController = new AbortController();
  };

  // ---------------------------------------------------------------------------------------------------

  componentWillUnmount = () => {
    window.removeEventListener("keydown", this.keyListener, true);
    this.abortController?.abort();
    this.abortController = undefined;
    this.setState({ waiting: false });
  };

  // ---------------------------------------------------------------------------------------------------

  private changeOpenState = (open: boolean) => {
    const wasOpen = this.state.isOpen;
    this.setState({ isOpen: open });
    if (wasOpen && !open) {
      this.abortWhileMounted();
    }
  };

  // ---------------------------------------------------------------------------------------------------

  closePanel = () => {
    this.changeOpenState(false);
  };

  // ---------------------------------------------------------------------------------------------------

  private abortWhileMounted() {
    // Each instnce of AbortController can abort() only once, afterwards
    // each new signal generated by the AbortController has a state of being already aborted.
    // Since aborting is supposed to open when the user closes the LoginPanel, but
    // closing the LoginPanel only closes it, but does not necessarily unmount it,
    // we have to re-create a new AbortController for when the user tries again to log in.
    this.abortController?.abort();
    this.abortController = new AbortController();
  }

  // ---------------------------------------------------------------------------------------------------

  getButtonText(t: TFunction): string {
    const user = this.props.viewState.loginData!.user;
    const username = user ? user.username : null;
    return (username ? username + " | " : "") + t("logoutPanel.btnText");
  }

  // ---------------------------------------------------------------------------------------------------

  render() {
    const { t } = this.props;

    const user = this.props.viewState.loginData!.user;
    if (!user) return null;

    const name = user.first_name ? user.first_name : user.username;
    const waiting = this.state.waiting;
    const dropdownTheme = {
      inner: Styles.dropdownInner,
      icon: "user"
    };

    return (
      //@ts-ignore - not yet ready to tackle tsfying MenuPanel
      <MenuPanel
        theme={dropdownTheme}
        btnRef={this.props.refFromHOC}
        btnTitle={t("logoutPanel.btnTitle")} //
        btnText={this.getButtonText(t)} //
        viewState={this.props.viewState}
        smallScreen={this.props.viewState.useSmallScreenInterface}
      >
        <>
          {waiting && <div>Logging out...</div>}
          {!waiting && (
            <Box padded column>
              <Spacing bottom={3} />
              <Text bold as="label">
                {t("logoutPanel.areYouSure", { name: sanitizeHTML(name) })}
              </Text>
              <Spacing bottom={3} />
              <LogoutButton onLogoutClick={this.onLogoutClick} t={t} />
            </Box>
          )}
        </>
      </MenuPanel>
    );
  }
}

// ==============================================================================================================

interface ILogoutButtonProps {
  onLogoutClick: () => void;
  t: TFunction;
}

// ==============================================================================================================

function LogoutButton({ onLogoutClick, t }: ILogoutButtonProps) {
  return (
    <Button rounded={true} primary={true} onClick={onLogoutClick}>
      {t("logoutPanel.btnText")}
    </Button>
  );
}

// ==============================================================================================================

export const LOGOUT_PANEL_NAME = "MenuBarLogoutButton";
export default withTranslation()(
  withTheme(withTerriaRef(LogoutPanel, LOGOUT_PANEL_NAME))
);
